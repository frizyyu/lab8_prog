buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.johnrengelman:shadow:8.1.1"
    }
}
plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}


group 'com'
version '1.0-SNAPSHOT'

repositories {
    gradlePluginPortal()
}

ext {
    junitVersion = '5.9.2'
}

apply plugin: "com.github.johnrengelman.shadow"

sourceCompatibility = '17'
targetCompatibility = '17'



javafx {
    version = '17.0.6'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.1.2'
    implementation('com.google.code.gson:gson:2.8.7')
    implementation('com.dlsc.formsfx:formsfx-core:11.6.0') {
        exclude(group: 'org.openjfx')
    }

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test{
    environment 'JAVA_TOOL_OPTIONS', '--add-opens=java.base/java.time=ALL-UNNAMED'
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

/*tasks.register('fatJar', Jar) {
    manifest.from jar.manifest
    classifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}*/

jar {
    manifest {
        attributes('Main-class': 'Main')
    }
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

shadow {
    shadowJar {
        archiveBaseName.set('Lab8')
        archiveClassifier.set('')
    }
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}