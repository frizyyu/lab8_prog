/*buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.johnrengelman:shadow:8.1.1"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE")
    }
}

plugins {
    id 'java'
    id('com.github.johnrengelman.shadow') version '8.1.1'
}

repositories {
    gradlePluginPortal()
}


apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'application'
applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]

application {
    mainClass = 'main.Main'
}*/
plugins {
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'application'

applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]

application {
    mainClass = 'Main'
}

//sourceSets.main.java.srcDirs = ['src']

repositories {
    mavenCentral()
}

javafx {
    version = '17.0.6'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation("com.google.guava:guava:32.1.1-jre")
    implementation('com.fasterxml.jackson.core:jackson-databind:2.16.1')
    implementation('com.fasterxml.jackson.core:jackson-core:2.8.6')
    implementation('com.fasterxml.jackson.core:jackson-annotations:2.8.6')
    implementation('com.google.code.gson:gson:2.9.1')
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.12.4'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.4'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.4.12'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.14'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.9'
    implementation("org.slf4j:slf4j-api:1.8.0-beta2")
    runtimeOnly("org.jlib:jlib-awslambda-logback:1.0.0")
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.postgresql:postgresql:42.2.27'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation group: 'com.massisframework', name: 'j-text-utils', version: '0.3.4'
    implementation('com.dlsc.formsfx:formsfx-core:11.6.0') {
        exclude(group: 'org.openjfx')
    }
}

/*test{
    environment 'JAVA_TOOL_OPTIONS', '--add-opens=java.base/java.time=ALL-UNNAMED'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}*/

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes(
                'Main-Class': 'Main',
                'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
        )
    }
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

/*jar {
    manifest {
        attributes('Main-class': 'Main', 'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '))
    }
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
tasks {
    assemble {
        dependsOn(shadowJar)
    }
}
shadow {
    shadowJar {
        archiveBaseName.set('Lab6Server')
        archiveClassifier.set('')
    }
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}*/